openapi: 3.0.0
info:
  title: NWO Control
  description: Software Engineering Project API
  termsOfService: http://swagger.io/terms/
  contact:
    name: Konstantinos Strikos
    email: strikosk@ece.auth.gr
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: /
paths:
  /user:
    post:
      summary: Log in
      description: Logs a user in with their credentials.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_body'
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
        "401":
          description: Unauthorized
      x-swagger-router-controller: Default
  /user/{UserID}:
    post:
      description: FR1/FR2 - The user should be able to select the parameters and
        the campaign.
      operationId: selectCampaignParameters
      parameters:
      - name: UserID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_UserID_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/contract'
                x-content-type: application/json
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
    delete:
      summary: Delete a user by ID
      operationId: userUserIDDELETE
      parameters:
      - name: UserID
        in: path
        description: ID of the user to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found
      x-swagger-router-controller: Default
  /user/{UserID}/contract:
    get:
      description: fr5
      operationId: viewContracts
      parameters:
      - name: UserID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: get contracts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/contract'
                x-content-type: application/json
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
  /user/{UserID}/contract/{ContractID}:
    put:
      description: fr4
      operationId: userDecision
      parameters:
      - name: UserID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ContractID
        in: path
        description: ID of the contract
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contract_ContractID_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/contract'
                x-content-type: application/json
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
  /user/{UserID}/contract/{ContractID}/post:
    get:
      summary: FR 8 - The user should be able to search and view the actions of the
        bots.
      description: View the posts the Bots have done
      operationId: getPosts
      parameters:
      - name: ContractID
        in: path
        description: ID of the contract
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: UserID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
                x-content-type: application/json
        "400":
          description: The provided parameters are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
    put:
      summary: FR 8 - The user should be able to search and view the actions of the
        bots.
      description: Edit the filters of the search
      operationId: filterBy
      parameters:
      - name: ContractID
        in: path
        description: ID of the contract
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: UserID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractID_post_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/post'
                x-content-type: application/json
        "400":
          description: The provided parameters are incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
  /user/{UserID}/contract/{ContractID}/graph/{GraphID}:
    get:
      description: |
        Returns all statistical graphs for the specific campaign
      operationId: SeeStatistics
      parameters:
      - name: ContractID
        in: path
        description: ID of the contract
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: UserID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: GraphID
        in: path
        description: ID of a specific graph
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: chosen graph
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Graph'
                x-content-type: application/json
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
  /user/{UserID}/contract/{ContractID}/post/{BotID}:
    get:
      summary: FR9
      description: Returns a bots' profile
      operationId: SeeThePostsByAllBots
      parameters:
      - name: ContractID
        in: path
        description: ID of the contract
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: UserID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: BotID
        in: path
        description: ID of the bots
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: chosen bot
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
                x-content-type: application/json
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
  /user/feedback:
    post:
      description: User gives feedback
      operationId: UserSendsFeedback
      responses:
        "200":
          description: sent feedback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-swagger-router-controller: Default
components:
  schemas:
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    user:
      type: object
      properties:
        UserID:
          type: string
        username:
          type: string
        password:
          type: string
      example:
        password: password
        UserID: UserID
        username: username
    post:
      required:
      - BotID
      - postID
      type: object
      properties:
        postID:
          type: string
        BotID:
          type: string
        postLink:
          type: string
          format: uri
        imgPost:
          type: string
          format: uri
      example:
        postLink: http://example.com/aeiou
        imgPost: http://example.com/aeiou
        BotID: BotID
        postID: postID
    contract:
      type: object
      properties:
        name:
          type: string
        ContractID:
          type: string
        status:
          type: integer
      example:
        name: name
        ContractID: ContractID
        status: 0
    Graph:
      type: object
      properties:
        xData:
          type: array
          items:
            type: number
        yData:
          type: array
          items:
            type: number
        color:
          type: string
        labels:
          type: array
          items:
            type: string
        size:
          type: number
      example:
        color: color
        size: 1.4658129805029452
        xData:
        - 0.8008281904610115
        - 0.8008281904610115
        yData:
        - 6.027456183070403
        - 6.027456183070403
        labels:
        - labels
        - labels
    Bot:
      type: object
      properties:
        Name:
          type: string
        id:
          type: integer
        Profiles:
          type: array
          items:
            type: string
        Stats:
          type: array
          items:
            type: string
        top5:
          type: array
          items:
            $ref: '#/components/schemas/post'
      example:
        top5:
        - postLink: http://example.com/aeiou
          imgPost: http://example.com/aeiou
          BotID: BotID
          postID: postID
        - postLink: http://example.com/aeiou
          imgPost: http://example.com/aeiou
          BotID: BotID
          postID: postID
        Profiles:
        - Profiles
        - Profiles
        Stats:
        - Stats
        - Stats
        id: 0
        Name: Name
    user_body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    user_UserID_body:
      required:
      - comments
      - intensity
      - platforms
      type: object
      properties:
        select:
          type: string
        comments:
          type: string
        platforms:
          type: integer
        intensity:
          type: integer
    contract_ContractID_body:
      type: object
      properties:
        Decision:
          type: boolean
    ContractID_post_body:
      type: object
      properties:
        SortBy:
          type: integer
        Platforms:
          type: integer
    inline_response_200:
      type: object
      properties:
        message:
          type: string
        email:
          type: string
          description: Your feedback has been submitted.
      example:
        message: message
        email: email
